# Boilerplate code generated by OVITO Pro 3.9.2
# import PySide6.QtWidgets

# app = PySide6.QtWidgets.QApplication() 

# exit(0)
import sys 
from ovito.io import *
from ovito.modifiers import *
from ovito.data import *
from ovito.pipeline import *
from ovito.vis import *
from ovito.qt_compat import QtCore
# Data import:

nu=float(sys.argv[1])
Init_cond=int(sys.argv[2])
Nsim=int(sys.argv[3])
# nu=0.3
dir='nu_{:.3f}_c0_0.000_KA_10.000_KB_0.005000_init_cond_{}_Nsim_{}'.format(nu,Init_cond,Nsim)
# nu_0.200_c0_0.000_KA_10.000_KB_0.005000_init_cond_2_Nsim_1

pipeline = import_file('/nfs/scistore16/wojtgrp/mrojasve/MiraculousMembranes/projects/geometric-flow/Results/Mem3DG_Cell_Shape/'+dir+'/Membrane_*.obj')
# pipeline = import_file('/nfs/scistore16/wojtgrp/mrojasve/')
# Manual modifications of the imported data objects:
def modify_pipeline_input(frame: int, data: DataCollection):
    data.triangle_meshes['mesh_'].face_count = 3254
    data.triangle_meshes['mesh_'].vertex_count = 1629
# pipeline.modifiers.append(modify_pipeline_input)

# Visual element initialization:
data = pipeline.compute() # Evaluate new pipeline to gain access to visual elements associated with the imported data objects.
data.triangle_meshes['mesh'].vis.color = (1.0, 0.7529411911964417, 0.9960784316062927)
data.triangle_meshes['mesh'].vis.transparency = 0.45
data.triangle_meshes['mesh'].vis.highlight_edges = True
del data # Done accessing input DataCollection of pipeline.
pipeline.add_to_scene()

# Viewport setup:
viewport_layout = []

# Viewport "Top":
vp = Viewport(
    type = Viewport.Type.Top, 
    fov = 1.83225788935, 
    camera_pos = (-0.0004895000000000316, 0.5363805, -0.0004250000000000087))
viewport_layout.append((vp, [0.0, 0.0, 0.5, 0.5]))  # [left,top,width,height]

# Viewport "Left":
vp = Viewport(
    type = Viewport.Type.Left, 
    fov = 1.60187393166, 
    camera_dir = (1.0, -0.0, -0.0), 
    camera_pos = (-0.0004895000000000316, 0.5363805, -0.0004250000000000087))
viewport_layout.append((vp, [0.0, 0.5, 0.5, 0.5]))  # [left,top,width,height]

# Viewport "Front":
vp = Viewport(
    type = Viewport.Type.Front, 
    fov = 1.16547934407, 
    camera_dir = (-0.0, 1.0, -0.0), 
    camera_pos = (-0.0004895000000000316, 0.5363805, -0.0004250000000000087))
viewport_layout.append((vp, [0.5, 0.0, 0.5, 0.5]))  # [left,top,width,height]

# Viewport "Perspective":
vp = Viewport(
    type = Viewport.Type.Perspective, 
    fov = 0.610865238198, 
    camera_dir = (-0.49923017660270624, 0.665640235470275, -0.5547001962252291), 
    camera_pos = (2.3425997877639446, -2.587738550351927, 2.603007541959939))
viewport_layout.append((vp, [0.5, 0.5, 0.5, 0.5]))  # [left,top,width,height]


# Renderer setup:
renderer = TachyonRenderer(
    antialiasing = False, 
    direct_light_intensity = 0.94, 
    shadows = False, 
    ambient_occlusion = False)

# Rendering:
vp.render_anim(filename='/nfs/scistore16/wojtgrp/mrojasve/MiraculousMembranes/projects/geometric-flow/Results/Mem3DG_Cell_Shape/'+dir+'.mp4', size=(600, 600),  renderer=renderer,layout=viewport_layout, fps=10.0)