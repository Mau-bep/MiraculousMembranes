# Boilerplate code generated by OVITO Pro 3.9.2
from ovito.io import *
from ovito.modifiers import *
from ovito.data import *
from ovito.pipeline import *
from ovito.vis import *
from ovito.qt_compat import QtCore
import sys
# Data import:

# strg=0.1
nu=1.0


Parent_dir='/nfs/scistore16/wojtgrp/mrojasve/Cluster_Folders/projects/geometric-flow/build/Mem3DG_Beads_40k_frenkel_areaint_big/Curv_adap_0.10Min_rel_length_0.50/'

def main(strg):
    dir='nu_{:.3f}_c0_0.000_KA_10.000_KB_0.005000_Inter_{:.6f}'.format(nu,strg)

    print(Parent_dir+dir+'/Bead_data.xyz' )
    pipeline = import_file(Parent_dir+dir+'/Bead_data.xyz')

    # Visual element initialization:
    data = pipeline.compute() # Evaluate new pipeline to gain access to visual elements associated with the imported data objects.
    data.particles.vis.radius = 1.0
    data.particles.vis.scaling = 1.0
    del data # Done accessing input DataCollection of pipeline.
    pipeline.add_to_scene()



    # I add more info to the scene
    print(Parent_dir+dir+'/*.obj')
    pipeline2 = import_file(Parent_dir+dir+'/membrane_*.obj')
    

    # Visual element initialization:
    data2= pipeline2.compute() # Evaluate new pipeline to gain access to visual elements associated with the imported data objects.
    data2.triangle_meshes['mesh'].vis.color = (1.0, 0.7529411911964417, 0.9960784316062927)
    data2.triangle_meshes['mesh'].vis.highlight_edges = True
    del data2 # Done accessing input DataCollection of pipeline.

    pipeline2.add_to_scene()



    renderer = TachyonRenderer(
        antialiasing = False, 
        direct_light_intensity = 0.94, 
        shadows = False, 
        ambient_occlusion = False)




    # Viewport setup:
    viewport_layout = []

    # Viewport "Ortho":
    vp = Viewport(
        type = Viewport.Type.Ortho, 
        fov = 1.70085485885, 
        camera_dir = (-0.647793415700711, 0.7615711250944575, 0.01931610719498417), 
        camera_pos = (5.474591166718002, -0.48662740189777187, -0.4661112638621734))
    viewport_layout.append((vp, [0.0, 0.0, 0.5, 0.5]))  # [left,top,width,height]

    # Viewport "Ortho":
    vp = Viewport(
        type = Viewport.Type.Ortho, 
        fov = 1.70085485885, 
        camera_dir = (-0.9585632373118519, 0.09834041292408162, 0.26736806701650745), 
        camera_pos = (-0.12130723158605937, 0.16517331543451808, 0.5944778092438756))
    viewport_layout.append((vp, [0.0, 0.5, 0.5, 0.5]))  # [left,top,width,height]

    # Viewport "Ortho":
    vp = Viewport(
        type = Viewport.Type.Ortho, 
        fov = 1.91770849835, 
        camera_dir = (-0.9826736825536199, -0.18355138553262085, -0.02571619111693805), 
        camera_pos = (1.5211018388121322, -0.8068937340547424, 0.21958645285474065))
    viewport_layout.append((vp, [0.5, 0.0, 0.5, 0.5]))  # [left,top,width,height]

    # Viewport "Perspective":
    vp = Viewport(
        type = Viewport.Type.Perspective, 
        fov = 0.610865238198, 
        camera_dir = (-0.028145307362777545, 0.4383197656530589, 0.89837833049963), 
        camera_pos = (5.583528459182683, -3.8558784415932745, -8.018489382391452))
    viewport_layout.append((vp, [0.5, 0.5, 0.5, 0.5]))  # [left,top,width,height]


    # Rendering:
    vp.render_anim(filename=Parent_dir+dir+'perspective_2.mp4', size=(600, 600),renderer=renderer,layout=viewport_layout, fps=5.0)

    return 



strg=float(sys.argv[1])
main(strg)
